// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	harego "github.com/blokur/harego/v2"
	mock "github.com/stretchr/testify/mock"
)

// RabbitMQ is an autogenerated mock type for the RabbitMQ type
type RabbitMQ struct {
	mock.Mock
}

// Channel provides a mock function with given fields:
func (_m *RabbitMQ) Channel() (harego.Channel, error) {
	ret := _m.Called()

	var r0 harego.Channel
	if rf, ok := ret.Get(0).(func() harego.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(harego.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *RabbitMQ) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRabbitMQ interface {
	mock.TestingT
	Cleanup(func())
}

// NewRabbitMQ creates a new instance of RabbitMQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRabbitMQ(t mockConstructorTestingTNewRabbitMQ) *RabbitMQ {
	mock := &RabbitMQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
